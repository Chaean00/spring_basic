2023_03_30
maven / gradle - 라이브러리를 빌드해주고 관리해주는 툴?
ㄴ 요새는 gradle로 넘어오는 추세

요즘 트렌드에서 test코드는 중요

resources에서는 java파일을 제외한 파일들이 들어감

2023_03_31

Gradle은 빌드할때 의존 라이브러리들을 모두 가져옴
(*)표시는 이미 가져온 라이브러리 중복을 제거했다는 뜻

스프링부트 라이브러리
spring-boot-starter-web
ㄴ tomcat, spring-webmvc(웹mvc)
thymeleaf (템플릿엔진)
slf4j (로그관련) : 쉽게 말해 인터페이스
logback (로그관련) : 로그를 어떤 구현체로 출력할 것인가?
spring-core

--테스트관련--
junit : ??
spring-test : 스프링과 통합해서 테스트하게 도와주는 라이브러리?
assertj : 테스트 코드를 좀 더 편하게 작성하게 도와주는 lib

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

2023_04_03
resources/static : 정적페이지
ㄴ 요기에 index.html을 만들면 Welcome Page를 만들 수 있음

스프링부트는 거대하기 때문에 검색하는 방법도 중요함
ㄴ https://spring.io/ 공식 홈페이지에서 공식문서를 검색하는게 제일 베스트

웹 어플리케이션에서 첫번째 진입점이 Controller

@Controller
public class HelloController {
    @GetMapping("hello")
    public String hello(Model model) {
        model.addAttribute("data", "????");
        return "hello";
    }
}

웹 어플리케이션에서 /hello로 들어가면
public String hello(Model model) {
        model.addAttribute("data", "????");
        return "hello";
    }
메소드가 호출이 됨
return "hello"; 는
templates/hello.html을 찾아가서 렌더링 하라는 뜻
ㄴ viewResolver가 처리해줌

<p th:text ="'안녕하세요. '+ ${data}"> 안녕하세요 손님.</p>
에서 th는 타임리프 문법

2023_04_23
정적 컨텐츠 - 그냥 파일을 그대로 내려주는 것
spring에서는 웹브라우저 -> 내장 톰캣 서버
에서 관련 컨트롤러가 있는지 확인하고 없다면 /static에서 찾아봄

MVC의 템플릿 엔진 (모델 뷰 컨트롤러)
ㄴ 모델 / 뷰 / 컨트롤러로 역할을 쪼개서 개발하는 방식

api방식 - json이라는 데이터 구조 포멧으로 클라이언트에게 데이터를 전달하는 방식(요즘)
ㄴ 정적 페이지만 아니면 보통 2가지
- html로 내리느냐
- api방식이라는 것으로 데이터를 바로 내리느냐(json)

Model model - 뷰에 데이터를 전달하기 위해 사용되는 인터페이스
컨트롤러에서 'Model' 객체를 파라미터로 선언하면, 해당 컨트롤러가 호출되어 실행될 때
뷰에 전달할 데이터를 'Model'객체에 추가할 수 있다.
= 즉! 'Model'객체는 뷰와 컨트롤러 사이에서 데이터를 전달하는데 사용되며, 컨트롤러 -> 뷰에 데이터를 전달할 때 주로 사용됨

'''
@GetMapping("hello-mvc")
    public String helloMvc(@RequestParam("name")String name ,Model model) {
        model.addAttribute("name", name);
        return "hello-template";
    }
}
'''

'''
@RequestParam("name")String name
'''
"name"이라는 매개 변수가 HTTP요청에서 필요하다는 것을 나타냄.
String name은 해당 매개 변수의 값을 받아들이는 변수

@ResponseBody - http에서 헤더/바디 부분에서 바디부분에 data를 직접 넣어주겠다라는 의미

'''
@GetMapping("hello-string")
    @ResponseBody
    public String helloString(@RequestParam("name")String name) {
        return "hello" + name;
    }
'''
ㄴ 문자?를 직접 내려주는 방식

```
@GetMapping("hello-api")
    @ResponseBody
    public Hello helloApi(@RequestParam("name")String name) {
        Hello hello = new Hello();
        hello.setName(name);
        return hello;
    }

    static class Hello {
        private String name;

        public String getName() {
            return name;
        }
        public void setName(String name) {
            this.name = name;
        }
    }
```
ㄴ ★ json형태로 데이터를 전달해줌 ★ key - value
ㄴ json형태로 데이터를 전달해주는게 거의 default!!!

2023_04_29
컨트롤러 : 웹 MVC의 컨트롤러 역할
서비스 : 핵심 비즈니스 로직 구현
리포지토리 : 데이터베이스에 접근, 도메인 객체를 DB에 저장하고 관리
도메인 : 비즈니스 도메인 객체 ex)회원, 주문, 쿠폰 등등 DB에 저장하고 관리됨

근데 패키지가 뭐지?? - 클래스, 인터페이스 등 논리적인 그룹을 나타는 데 사용됨. 중복가능, import문을 통해 다른 패키지의 클래스를 참조할 수 있음
Optional?? - 자바 8에 추가된 기능으로 null 값을 처리하는 방법 중 하나, 값이 있을 수도 없을 수도 있는 객체를 감싸서 처리
            null일 경우 - Optional.empty()를 반환

'''
public class MemoryMemberRepository implements MemberRepository{
}
'''
에서 implements는 인터페이스를 구현하는 것. 인터페이스에서는 선언만 하고 정의(내용)은 하지않기때문

메소드 OR 변수를 '구현'하는가 그대로 '사용'하는가에 따라서 상속의 형태가 갈리게 된다.

1. extends
부모에서 선언 / 정의를 모두하며 자식은 메소드 / 변수를 그대로 사용할 수 있음
2. implements (interface 구현)
부모 객체는 선언만 하며 정의(내용)은 자식에서 오버라이딩 (재정의) 해서 사용해야함
3. abstract
extends와 interface 혼합. extends하되 몇 개는 추상 메소드로 구현되어 있음

Map 함수
- Map은 자바 컬렉션 프레임워크의 인터페이스 중 하나입니다. Key와 Value로 구성된 데이터를 다루는 데 사용됩니다. - json?
- Key-Value 쌍을 저장하며, Key는 중복이 불가능하고, Value는 중복이 가능합니다. 따라서, Key를 통해 Value에 접근할 수 있음
ex)
'''
private static Map<Long, Member> store = new HashMap<>();
'''
실무에서는 동시성 문제가 있을 수 있어 공유되는 변수일 때는 HashMap 대신 ConcurrentHashMap를 사용

동작을 하는지 안하는지 확인하기 위해 - "테스트 케이스"를 작성 -> TDD?
TDD - 먼저 테스트 코드를 작성하고, 이를 통과시키는 코드를 작성하는 방식으로 개발을 진행

2023_05_01
```
@Test
    public void save() {
        Member member = new Member();
        member.setName("Spring");

        repository.save(member);
        Member result = repository.findById(member.getId()).get();
        // Assertions.assertEquals의 매개변수에는 (기대하는 값, 실제 값)을 넣어서 실행
        // 만약 성공했다면 값은 안나오지만 초록불 / 아니라면 빨간불과 함께 오류
        Assertions.assertEquals(member, null);

        // Assertions.assertThat은 매개변수의 순서가 중요하지않음.
        // 그저 두개를 비교하고 성공과 실패를 판단
        assertThat(member).isEqualTo(result);
    }
```
테스트코드는 만들었던 함수를 따로 실행해 볼 수 있음
테스트코드를 작성할 때는 반드시 @Test 어노테이션 추가!
테스트하는 순서는 랜덤 - 순서에 의존적으로 설계하면 절대 안돼!!


```
MemoryMemberRepository repository = new MemoryMemberRepository();

    @AfterEach
    public void afterEach() {
        repository.clearStore();
    }
```
```
// MemoryMemberRepository
public void clearStore() {
        store.clear();
    }
```
findAll()이 실행되고 findByName()을 실행시켰을 때 findAll()에서 생성된 Spring1과 findByName()에서 생성된 Spring2는 서로 다른 객체이므로 오류.
그래서 테스트가 하나 끝나고나면 꼭! 클리어를 해주어야 함
@AfterEach 어노테이션은 각각의 테스트 메소드가 실행된 후에 실행되는 메소드를 나타냄

TDD (테스트 주도 개발) - 테스트코드를 먼저 작성하고, 실제 코드를 구현하는 방식
ㄴ 테스트코드를 먼저 작성하면 어떻게 실행시키지???

2023_05_03
```
private final MemberRepository memberRepository = new MemoryMemberRepository();
```
- final로 선언하면 구현체를 변경할 수 없음 = 변경X
- 인터페이스 MemberRepository타입의 변수를 선언하고 emoryMemberRepository 객체로 초기화 한 것
    - 인터페이스와 구현체 간의 다형성???
```
Optional<Member> result = memberRepository.findByName(member.getName());

result.ifPresent(m -> {
            throw new IllegalStateException("이미 존재하는 회원입니다");
        });
```
'ifPresent'메소드는 값이 'Optional' 객체 안에 값이 존재할 경우 람다식을 실행
== ifPresent 메소드가 호출된 Optional 객체 안에 값이 존재할 경우 실행되며,
해당 값을 m 변수에 할당합니다. 이 람다 표현식은 이미 존재하는 회원일 경우,
예외를 발생시키는 역할을 합니다. -chatgpt-

```
// 객체의 상태나 조건을 검사하여 예상과 다른 경우에 예외 발생
IllegalStateException
```
```
//  자바에서 예외를 직접 발생시키기 위해 사용되는 키워드
throw
```
인텔리제이 ctrl + alt + m -> 메서드로 만들어줌
         ctrl + shift + t -> 테스트 생성
         ctrl + alt + v -> 타입에 맞춰 변수 자동생성
         alt + enter -> static import 단축키
         shift + f6 -> 이름 한번에 리팩토링

테스트코드는 한글로 사용해도 ㄱㅊ
테스트 코드를 작성할때는 given - when - then의 패턴을 사용하는 것을 추천
Given: 테스트 환경을 설정하는 파트입니다. 테스트를 실행하기 위해 필요한 데이터나 객체들을 생성하거나 설정합니다.
When: 실제 테스트를 실행하는 파트입니다. Given 파트에서 설정한 환경에서 특정 메소드를 호출하거나, 어떤 동작을 수행합니다.
Then: When 파트에서 실행된 결과를 검증하는 파트입니다. 예상한 결과가 나오는지를 검증합니다.
-chatgpt-


```
assertThrows(IllegalStateException.class, () -> memberService.join(member2));
```
assertThrows는 특정 예외가 발생하는지를 검증하는 AssertJ 라이브러리의 메소드입니다.
첫 번째 인자로 예상되는 예외 클래스를, 두 번째 인자로는 예외가 발생할 코드를 람다식으로 전달합니다.
-chatgpt-

```
    MemberService memberService;
    MemoryMemberRepository memberRepository;

    @BeforeEach
    public void beforeEach() {
        memberRepository = new MemoryMemberRepository();
        memberService = new MemberService(memberRepository);
    }
```
원래 코드는 MemberService에서 직접 new MemoryMemberRepository를 하여 직접 생성하고
또 다른 객체인 MemoryMemberRepository memberRepository을 만들어 그 안에 clearStore 메소드를 사용했는데
이러면 서로 다른 객체라 후에 오류가 생길 가능성이 크기때문에 위 코드 처럼 변경
이를 의존성 주입(Dependency Injection, DI)라고 한다

2023_05_08
@Autowired
- 컨테이너에 있는 것을 가져와서 연결시켜줌 - 이것이 DI(의존성 주입)

@Service
- 어노테이션은 스프링에서 비즈니스 로직이 구현된 클래스를 표시할 때 사용
스프링 컨테이너에서 빈으로 관리됨.

@Repository
- 스프링에서 DAO(Data Access Object) 클래스를 표시할 때 사용
- 데이터베이스와 상호작용하는 DAO 계층에서 사용되며, 데이터를 조회하거나 조작하는 메소드들을 구현하는 데 사용됩니다.
스프링 컨테이너에서 빈으로 관리됨.

- controller에서 외부요청을 받고 service에서 비즈니스 로직을 만들고, repository에서 데이터를 저장하는 것이 정형화된 패턴

스프링 빈?
- 스프링이 관리하는 객체를 의미
등록하는 방법 2가지
- 컴포넌트 스캔(어노테이션), 자동 의존관계 설정
    - @Component 어노테이션이 있으면 스프링 빈으로 자동 등록
- 자바 코드로 직접 스프링 빈 등록하기


메인 클래스에 포함되는 하위 패키지들만 가능
컨테이너에 스프링 빈을 등록할 때 기본으로 싱글톤으로 등록
싱글톤
- 어떤 클래스의 인스턴스가 하나만 생성되도록 보장하는 패턴입니다

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
2023.07.03

DI는 필드 주입, setter 주입, 생성자 주입이 있는데 생성자 주입을 가장 권장

2023.07.04

SOLID 원칙 - 찾아볼것
ㄴ 객체지향 개발의 5대원리

JdbcTemplate에 대해 공부
다양한 어노테이션에 대해 공부