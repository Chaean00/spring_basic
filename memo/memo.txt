2023_03_30
maven / gradle - 라이브러리를 빌드해주고 관리해주는 툴?
ㄴ 요새는 gradle로 넘어오는 추세

요즘 트렌드에서 test코드는 중요

resources에서는 java파일을 제외한 파일들이 들어감

2023_03_31

Gradle은 빌드할때 의존 라이브러리들을 모두 가져옴
(*)표시는 이미 가져온 라이브러리 중복을 제거했다는 뜻

스프링부트 라이브러리
spring-boot-starter-web
ㄴ tomcat, spring-webmvc(웹mvc)
thymeleaf (템플릿엔진)
slf4j (로그관련) : 쉽게 말해 인터페이스
logback (로그관련) : 로그를 어떤 구현체로 출력할 것인가?
spring-core

--테스트관련--
junit : ??
spring-test : 스프링과 통합해서 테스트하게 도와주는 라이브러리?
assertj : 테스트 코드를 좀 더 편하게 작성하게 도와주는 lib

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

2023_04_03
resources/static : 정적페이지
ㄴ 요기에 index.html을 만들면 Welcome Page를 만들 수 있음

스프링부트는 거대하기 때문에 검색하는 방법도 중요함
ㄴ https://spring.io/ 공식 홈페이지에서 공식문서를 검색하는게 제일 베스트

웹 어플리케이션에서 첫번째 진입점이 Controller

@Controller
public class HelloController {
    @GetMapping("hello")
    public String hello(Model model) {
        model.addAttribute("data", "????");
        return "hello";
    }
}

웹 어플리케이션에서 /hello로 들어가면
public String hello(Model model) {
        model.addAttribute("data", "????");
        return "hello";
    }
메소드가 호출이 됨
return "hello"; 는
templates/hello.html을 찾아가서 렌더링 하라는 뜻
ㄴ viewResolver가 처리해줌

<p th:text ="'안녕하세요. '+ ${data}"> 안녕하세요 손님.</p>
에서 th는 타임리프 문법

2023_04_23
정적 컨텐츠 - 그냥 파일을 그대로 내려주는 것
spring에서는 웹브라우저 -> 내장 톰캣 서버
에서 관련 컨트롤러가 있는지 확인하고 없다면 /static에서 찾아봄

MVC의 템플릿 엔진 (모델 뷰 컨트롤러)
ㄴ 모델 / 뷰 / 컨트롤러로 역할을 쪼개서 개발하는 방식

api방식 - json이라는 데이터 구조 포멧으로 클라이언트에게 데이터를 전달하는 방식(요즘)
ㄴ 정적 페이지만 아니면 보통 2가지
- html로 내리느냐
- api방식이라는 것으로 데이터를 바로 내리느냐(json)

Model model - 뷰에 데이터를 전달하기 위해 사용되는 인터페이스
컨트롤러에서 'Model' 객체를 파라미터로 선언하면, 해당 컨트롤러가 호출되어 실행될 때
뷰에 전달할 데이터를 'Model'객체에 추가할 수 있다.
= 즉! 'Model'객체는 뷰와 컨트롤러 사이에서 데이터를 전달하는데 사용되며, 컨트롤러 -> 뷰에 데이터를 전달할 때 주로 사용됨

'''
@GetMapping("hello-mvc")
    public String helloMvc(@RequestParam("name")String name ,Model model) {
        model.addAttribute("name", name);
        return "hello-template";
    }
}
'''

'''
@RequestParam("name")String name
'''
"name"이라는 매개 변수가 HTTP요청에서 필요하다는 것을 나타냄.
String name은 해당 매개 변수의 값을 받아들이는 변수

@ResponseBody - http에서 헤더/바디 부분에서 바디부분에 data를 직접 넣어주겠다라는 의미

'''
@GetMapping("hello-string")
    @ResponseBody
    public String helloString(@RequestParam("name")String name) {
        return "hello" + name;
    }
'''
ㄴ 문자?를 직접 내려주는 방식

'''
@GetMapping("hello-api")
    @ResponseBody
    public Hello helloApi(@RequestParam("name")String name) {
        Hello hello = new Hello();
        hello.setName(name);
        return hello;
    }

    static class Hello {
        private String name;

        public String getName() {
            return name;
        }
        public void setName(String name) {
            this.name = name;
        }
    }
'''
ㄴ ★ json형태로 데이터를 전달해줌 ★ key - value
ㄴ json형태로 데이터를 전달해주는게 거의 default!!!

2023_04_24
컨트롤러 : 웹 MVC의 컨트롤러 역할
서비스 : 핵심 비즈니스 로직 구현
리포지토리 : 데이터베이스에 접근, 도메인 객체를 DB에 저장하고 관리
도메인 : 비즈니스 도메인 객체 ex)회원, 주문, 쿠폰 등등 DB에 저장하고 관리됨

근데 패키지가 뭐지?? - 클래스, 인터페이스 등 논리적인 그룹을 나타는 데 사용됨. 중복가능, import문을 통해 다른 패키지의 클래스를 참조할 수 있음
Optional?? - 자바 8에 추가된 기능으로 null 값을 처리하는 방법 중 하나, 값이 있을 수도 없을 수도 있는 객체를 감싸서 처리
            null일 경우 - Optional.empty()를 반환

'''
public class MemoryMemberRepository implements MemberRepository{
}
'''
에서 implements는 인터페이스를 구현하는 것. 인터페이스에서는 선언만 하고 정의(내용)은 하지않기때문

메소드 OR 변수를 '구현'하는가 그대로 '사용'하는가에 따라서 상속의 형태가 갈리게 된다.

1. extends
부모에서 선언 / 정의를 모두하며 자식은 메소드 / 변수를 그대로 사용할 수 있음
2. implements (interface 구현)
부모 객체는 선언만 하며 정의(내용)은 자식에서 오버라이딩 (재정의) 해서 사용해야함
3. abstract
extends와 interface 혼합. extends하되 몇 개는 추상 메소드로 구현되어 있음

Map 함수
- Map은 자바 컬렉션 프레임워크의 인터페이스 중 하나입니다. Key와 Value로 구성된 데이터를 다루는 데 사용됩니다. - json?
- Key-Value 쌍을 저장하며, Key는 중복이 불가능하고, Value는 중복이 가능합니다. 따라서, Key를 통해 Value에 접근할 수 있음
ex)
'''
private static Map<Long, Member> store = new HashMap<>();
'''
실무에서는 동시성 문제가 있을 수 있어 공유되는 변수일 때는 HashMap 대신 ConcurrentHashMap를 사용

동작을 하는지 안하는지 확인하기 위해 - "테스트 케이스"를 작성 -> TDD?
TDD - 먼저 테스트 코드를 작성하고, 이를 통과시키는 코드를 작성하는 방식으로 개발을 진행
